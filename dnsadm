#!/bin/bash

#   Copyright 2015 Brian Bennett
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# key_file='/var/run/named/session.key'

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi

usage () {
    printf "Usage:\n"
    printf "\t%s [add|delete|replace] type name address\n\n" "$0"
    printf "\ttype:    Resource Record Type\n"
    printf "\tname:    Resource Record Name\n"
    printf "\taddress: Resource Record IP address or quoted string\n"
}

to_ptr () {
    # Convert address to .arpa
    # :param 1: Address to convert
    # :returns: in-addr.arpa or ip6.arpa formatted string
    dig +nocmd +noall +question "@localhost" -x "$1" | awk '{print substr($1,2)}'
}

get_current_ttl () {
    dig +noall +answer -t $dns_type $record @localhost | awk '{print $2}'
}

prepare () {
    # Prepare nsupdate text
    # :param 1: Resource Record type
    # :param 2: Resource Record name
    # :param 3: Resource Record value
    # :returns: nsupdate commands
    local dns_type="$1"; shift
    local record="${1}"; shift
    local value="$*"

    case $dns_type in
        MX|SRV) ;;
        *)
            # If $value contains a space then quote it.
            [[ "$value" =~ [[:alnum:]][[:space:]][[:alnum:]] ]] && value="\"$value\""
            ;;
    esac

    if (( delete == 1 )) && (( add == 0 )); then
        # This is a delete only action.
        # If $value is null, then all record for the resource name are deleted.
        printf 'update delete %s IN %s %s\n' "$record" "$dns_type" "$value"
    fi

    if (( delete == 1 )) && (( add == 1 )); then
        # This is an update action.
        # In this case, delete all existing records.
        printf 'update delete %s IN %s\n' "$record" "$dns_type"
        # And if it's a PTR, remove any existing PTRs that match the old
        # forward name.
        if [[ $dns_type == PTR ]]; then
            grep 'ip6' <<< "$record" >/dev/null && forward_type="AAAA"
            grep 'in-addr' <<< "$record" >/dev/null && forward_type="A"
            old_ip=$(to_ptr $(dig -t "$forward_type" +short "$value" @localhost))
            printf 'update delete %s IN %s %s\n' "$old_ip" "$dns_type"
        fi
    fi

    (( add == 1 )) && printf 'update add %s %d IN %s %s\n' "$record" "${DNSADM_TTL:-3600}" "$dns_type" "$value"

    printf 'send\n'
}

#:- show :rrtype :record: value | Display live DNS entries
show () {
    # Display DNS records
    # :param 1: Resource Record type
    # :param 2: Resource Record name
    # :param 4: Resource Record value
    local dns_type="$1"; shift
    local record="$1"; shift
    local value="$1";

    echo ";RESULTS"
    local dig_args=("+noall" "+nocomments" "+question")
    case $dns_type in
        NS) dig_args+=("+authority" "+additional");;
        *)  dig_args+=("+answer");;
    esac
    dig_args+=("-t" "$dns_type" "$record" "@localhost")
    dig "${dig_args[@]}"
}

add=0
delete=0

action="$1"; shift

case $action in
    add ) add=1;;
    del|delete ) delete=1;;
    update|replace ) add=1; delete=1;;
    * ) usage; exit 1;;
esac

dns_type=$( tr '[:lower:]' '[:upper:]' <<< "$1" ); shift

if ( (( delete == 1 )) && (( $# < 1 )) ) ||
   ( ( (( delete == 0 )) || [[ "$dns_type" == "PTR" ]] ) && (( $# < 2 )) ); then
    echo "Not enough arguments." >&2
    usage; exit 1
fi

if [[ "${dns_type}" == "PTR" ]]; then
    value="${1}."; shift
    record=$(to_ptr "$1")
else
    record="$1"; shift
    value="$*"
fi

case $action in
    update|replace )
        if [[ -z $DNSADM_TTL ]]; then
            DNSADM_TTL=$(get_current_ttl)
        fi
    ;;
esac

prepare "$dns_type" "$record" "$value" | nsupdate -l

if (( $? == 0 )); then
    pri='audit.info'
    tag="${0##*/}" # basename $0
    [[ $add == 1 ]] && logger -p "$pri" -t "$tag" "$LOGNAME added $dns_type $record $value"
    [[ $delete == 1 ]] && logger -p "$pri" -t "$tag" "$LOGNAME removed $dns_type $record $value"
else
    echo "Update failed!" >&2
fi

show "$dns_type" "$record" "$value"
